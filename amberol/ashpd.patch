diff --git a/Cargo.toml b/Cargo.toml
index c02b9cc..0ed0171 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -24,9 +24,6 @@ serde_json = "1.0"
 sha2 = "0.10.2"
 srgb = "0.3"
 
-[target.'cfg(target_os = "linux")'.dependencies]
-ashpd = { version = "0.3", features = ["feature_gtk4"] }
-
 [dependencies.adw]
 package = "libadwaita"
 version  = "0.1.0"
diff --git a/src/window.rs b/src/window.rs
index 546bb63..01d1d85 100644
--- a/src/window.rs
+++ b/src/window.rs
@@ -8,11 +8,10 @@ use std::{
 
 use adw::subclass::prelude::*;
 #[cfg(target_os = "linux")]
-use ashpd::{desktop::background, WindowIdentifier};
 use glib::{clone, closure_local, FromVariant};
 use gtk::{gdk, gio, glib, prelude::*, subclass::prelude::*, CompositeTemplate};
 use gtk_macros::stateful_action;
-use log::{debug, warn};
+use log::debug;
 
 use crate::{
     audio::{AudioPlayer, Song, WaveformGenerator},
@@ -244,9 +243,6 @@ impl Window {
         win.restore_window_state();
         win.set_initial_state();
 
-        #[cfg(target_os = "linux")]
-        win.request_background();
-
         win
     }
 
@@ -1311,37 +1307,4 @@ impl Window {
             }
         };
     }
-
-    #[cfg(target_os = "linux")]
-    async fn portal_request_background(&self) {
-        let root = self.native().unwrap();
-        let identifier = WindowIdentifier::from_native(&root).await;
-
-        match background::request(
-            &identifier,
-            &i18n("Amberol needs to run in the background to play music"),
-            false,
-            None::<&[&str]>,
-            true,
-        )
-        .await
-        {
-            Ok(response) => {
-                debug!("Background request successful: {:?}", response);
-                self.application().unwrap().hold()
-            }
-            Err(err) => {
-                warn!("Background request denied: {}", err);
-                self.add_toast(i18n("Amberol cannot run in the background"));
-            }
-        }
-    }
-
-    #[cfg(target_os = "linux")]
-    fn request_background(&self) {
-        let ctx = glib::MainContext::default();
-        ctx.spawn_local(clone!(@weak self as win => async move {
-            win.portal_request_background().await
-        }));
-    }
 }
